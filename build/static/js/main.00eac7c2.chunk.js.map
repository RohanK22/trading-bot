{"version":3,"sources":["components/Header.js","components/Stock.js","index.js"],"names":["Header","props","state","dateAndTimeUTC","setInterval","setState","Date","now","myUTCDate","hrsDiff","getTimezoneOffset","waitHrs","getHours","console","log","Container","Row","Navbar","color","light","expand","md","NavbarBrand","href","Col","this","getHoursUntilMarketsOpen","React","Component","Stock","symbol","name","currentPrice","highPriceDay","lowPriceDay","openPriceDay","previousDayClosePrice","mic","marketOpen","historyPeriod","historyDay","historyWeek","historyMonth","historyHalfYear","historyYear","historyAllTime","a","fetch","response","json","jsonRes","c","ctx","document","getElementById","getContext","Chart","type","data","labels","datasets","label","backgroundColor","borderColor","options","Card","CardBody","CardTitle","tag","CardSubtitle","className","id","require","unix","C","chart","Page","stockSymbol","ReactDOM","render"],"mappings":"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","file":"static/js/main.00eac7c2.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Container, Row, Col, Navbar, NavbarBrand } from 'reactstrap';\r\n\r\nclass Header extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            dateAndTimeUTC: null,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        setInterval(() => {\r\n            this.setState({\r\n                dateAndTimeUTC: Date(Date.now()),\r\n            });\r\n        }, 1000);\r\n    }\r\n\r\n    getHoursUntilMarketsOpen() {\r\n        let myUTCDate = new Date(Date.now()); //this.state.dateAndTimeUTC;\r\n        let myUTCOffsetMinutes = myUTCDate.getTimezoneOffset();\r\n\r\n        let NYC_UTC_OffsetMinutes = -5 * 60;\r\n        let minsDiff = myUTCOffsetMinutes - NYC_UTC_OffsetMinutes;\r\n        let hrsDiff = minsDiff / 60; // I'm ahead by NYC time by hrsDiff hours\r\n\r\n        let hrsUntil9ForMe;\r\n        if (myUTCDate.getHours() > 16) {\r\n            hrsUntil9ForMe = 24 - myUTCDate.getHours() + 9.5;\r\n        } else if (myUTCDate.getHours() < 9.5) {\r\n            hrsUntil9ForMe = 9.5 - myUTCDate.getHours();\r\n        } else {\r\n            hrsUntil9ForMe = -1000;\r\n        }\r\n        let waitHrs = hrsUntil9ForMe + hrsDiff;\r\n        console.log(waitHrs);\r\n        if (waitHrs > 0) {\r\n            return <p>NYSE Opens in : {waitHrs} hours</p>;\r\n        } else {\r\n            return <p>NYSE Markets Status: Open</p>;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Container>\r\n                <Row>\r\n                    <Navbar color=\"light\" light expand=\"md\" md=\"auto\">\r\n                        <NavbarBrand href=\"/\">Trading Bot</NavbarBrand>\r\n                    </Navbar>\r\n\r\n                    <Col md=\"auto\">\r\n                        <Row>\r\n                            <h6>{this.state.dateAndTimeUTC}</h6>\r\n                        </Row>\r\n                        <Row>{this.getHoursUntilMarketsOpen()}</Row>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;\r\n","import React, { Component } from 'react';\r\nimport Chart from 'chart.js';\r\nimport {\r\n    Card,\r\n    CardBody,\r\n    CardTitle,\r\n    CardSubtitle,\r\n    CardText,\r\n    CardLink,\r\n    CardColumns,\r\n    Container,\r\n    Row,\r\n    Col,\r\n} from 'reactstrap';\r\n\r\nclass Stock extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            symbol: this.props.symbol,\r\n            name: this.props.name,\r\n            currentPrice: 0.0,\r\n            highPriceDay: 0.0,\r\n            lowPriceDay: 0.0,\r\n            openPriceDay: 0.0,\r\n            previousDayClosePrice: 0.0,\r\n            mic: '', // which stock index it corresponds to\r\n            marketOpen: false,\r\n            historyPeriod: 'D', // tells react to render one day span of prices by default\r\n            historyDay: null,\r\n            historyWeek: null,\r\n            historyMonth: null,\r\n            historyHalfYear: null,\r\n            historyYear: null,\r\n            historyAllTime: null,\r\n        };\r\n        console.log('Created a stock object! ' + this.state.name);\r\n    }\r\n\r\n    async componentDidMount() {\r\n        setInterval(async () => {\r\n            // fetch data from the APIs\r\n            let response = await fetch(\r\n                'https://finnhub.io/api/v1/quote?symbol=' +\r\n                    this.state.symbol +\r\n                    '&token=bv184tv48v6p0f6idl20'\r\n            );\r\n            let jsonRes = await response.json();\r\n            console.log(jsonRes);\r\n\r\n            // update state\r\n            this.setState({\r\n                currentPrice: jsonRes.c,\r\n            });\r\n\r\n            // graph the data based on historyPeriod\r\n            var ctx = document\r\n                .getElementById(this.state.symbol)\r\n                .getContext('2d');\r\n            var chart = new Chart(ctx, {\r\n                // The type of chart we want to create\r\n                type: 'line',\r\n\r\n                // The data for our dataset\r\n                data: {\r\n                    labels: [],\r\n                    datasets: [\r\n                        {\r\n                            label: this.state.symbol,\r\n                            backgroundColor: 'rgb(100%, 54.9%, 0%)',\r\n                            borderColor: 'rgb(15.1%, 63.6%, 15.1%)',\r\n                            data: [],\r\n                        },\r\n                    ],\r\n                },\r\n\r\n                // Configuration options go here\r\n                options: {},\r\n            });\r\n        }, 3000);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Card>\r\n                <CardBody>\r\n                    <Container>\r\n                        <Row>\r\n                            <Col md=\"auto\">\r\n                                <CardTitle tag=\"h5\">\r\n                                    {this.state.name}\r\n                                </CardTitle>\r\n                                <CardSubtitle\r\n                                    tag=\"h6\"\r\n                                    className=\"mb-2 text-muted\"\r\n                                >\r\n                                    {this.state.currentPrice}\r\n                                </CardSubtitle>\r\n                            </Col>\r\n\r\n                            <Col md=\"auto\">\r\n                                <CardTitle tag=\"h6\">\r\n                                    {this.state.symbol}\r\n                                </CardTitle>\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n                </CardBody>\r\n                <canvas id={this.state.symbol}></canvas>\r\n            </Card>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Stock;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Header from './components/Header';\r\nimport Stock from './components/Stock';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nconst Chart = require('chart.js');\r\nconst unix = require('to-unix-timestamp');\r\n\r\nclass StockView extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            realTimeData: {\r\n                c: 116.59,\r\n                h: 117.49,\r\n                l: 116.22,\r\n                o: 116.57,\r\n                pc: 116.03,\r\n                t: 1606582932,\r\n            },\r\n        };\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const apiKey = 'bv184tv48v6p0f6idl20';\r\n        const symbol = 'IBM';\r\n        const startDate = Date.parse('01 Jan 1970 00:00:00 GMT');\r\n        const endDate = unix(Date.now());\r\n        const response = await fetch(\r\n            `https://finnhub.io/api/v1/stock/candle?symbol=` +\r\n                symbol +\r\n                `&resolution=60&from=` +\r\n                startDate +\r\n                `&to=` +\r\n                endDate +\r\n                `&token=` +\r\n                apiKey\r\n        );\r\n        const json = await response.json();\r\n        console.log(json);\r\n        this.setState({ realTimeData: json });\r\n        this.update();\r\n\r\n        // chart\r\n        var ctx = document.getElementById('myChart').getContext('2d');\r\n        var chart = new Chart(ctx, {\r\n            // The type of chart we want to create\r\n            type: 'line',\r\n\r\n            // The data for our dataset\r\n            data: {\r\n                labels: this.state.realTimeData.t,\r\n                datasets: [\r\n                    {\r\n                        label: symbol,\r\n                        backgroundColor: 'rgb(255, 99, 132)',\r\n                        borderColor: 'rgb(255, 99, 132)',\r\n                        borderWidth: 1,\r\n                        data: this.state.realTimeData.c,\r\n                        fill: false,\r\n                        pointBorderColor: '#ffffff',\r\n                        pointRadius: 3,\r\n                    },\r\n                ],\r\n            },\r\n\r\n            // Configuration options go here\r\n            options: {},\r\n        });\r\n        //console.log(chart);\r\n    }\r\n\r\n    update() {\r\n        return this.state.realTimeData.c;\r\n    }\r\n\r\n    render() {\r\n        return <div>APPL Price: {this.update()}</div>;\r\n    }\r\n}\r\n\r\nclass C extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {};\r\n    }\r\n\r\n    async componentDidMount() {\r\n        var ctx = document.getElementById('myChart').getContext('2d');\r\n        var chart = new Chart(ctx, {\r\n            // The type of chart we want to create\r\n            type: 'line',\r\n\r\n            // The data for our dataset\r\n            data: {\r\n                labels: [],\r\n                datasets: [\r\n                    {\r\n                        label: 'My First dataset',\r\n                        backgroundColor: 'rgb(255, 99, 132)',\r\n                        borderColor: 'rgb(255, 99, 132)',\r\n                        data: [],\r\n                    },\r\n                ],\r\n            },\r\n\r\n            // Configuration options go here\r\n            options: {},\r\n        });\r\n        console.log(chart);\r\n    }\r\n\r\n    render() {\r\n        return <h2>Graph From chart.js</h2>;\r\n    }\r\n}\r\n\r\nclass Page extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            stockSymbol: 'GOOGL',\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log(this.state.stockSymbol);\r\n    }\r\n\r\n    render() {\r\n        this.state.stockSymbol = document.getElementById('stockSymbol');\r\n        console.log(this.state.stockSymbol);\r\n\r\n        return (\r\n            <div className=\"page\">\r\n                <div className=\"header\">\r\n                    <Header />\r\n\r\n                    <Stock name={'Apple'} symbol={'AAPL'} />\r\n                    <C />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n// ========================================\r\n\r\nReactDOM.render(<Page />, document.getElementById('root'));\r\n"],"sourceRoot":""}